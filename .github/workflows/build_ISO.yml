name: build_ISO
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: debian:latest
      # 允许在容器中 mount，需要 --privileged
      options: --privileged
    permissions:
      contents: write
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Install dependencies in the Debian container
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y \
            xorriso dpkg-dev curl gnupg syslinux-utils apt-rdepends wget mount tasksel

      # Replace root password in preseed.cfg
      - name: Replace root password in preseed.cfg
        env:
          ROOT_PASSWORD: ${{ secrets.ROOT_PASSWORD }}
        run: |
          if [ ! -f preseed.cfg ]; then
            echo "Error: preseed.cfg not found!"
            exit 1
          fi
          sed -i "s|__ROOT_PASSWORD__|${ROOT_PASSWORD}|g" preseed.cfg
          grep "d-i passwd/root-password password ${ROOT_PASSWORD}" preseed.cfg
          grep "d-i passwd/root-password-again password ${ROOT_PASSWORD}" preseed.cfg

      # Set version variables
      - name: Set version variables
        run: |
          echo "DEBIAN_VERSION=12.8.0" >> $GITHUB_ENV

      # Determine ISO URL and file name dynamically
      - name: Fetch latest ISO URL
        run: |
          ISO_BASE_URL="https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/"
          ISO_FILE=$(curl -s $ISO_BASE_URL | grep -oP 'href="debian-[0-9\.]+-amd64-netinst.iso"' | head -n 1 | cut -d'"' -f2)
          echo "DEBIAN_ISO_NAME=$ISO_FILE" >> $GITHUB_ENV
          echo "DEBIAN_ISO_URL=${ISO_BASE_URL}${ISO_FILE}" >> $GITHUB_ENV
        shell: bash

      # Download the Debian ISO
      - name: Download Debian ISO
        run: |
          wget -q $DEBIAN_ISO_URL -O $DEBIAN_ISO_NAME
          ls -lh $DEBIAN_ISO_NAME
          if [ ! -s "${DEBIAN_ISO_NAME}" ]; then
            echo "Error: ISO file not downloaded or empty."
            exit 1
          fi

      # Make script executable & run create_ISO.bash inside container
      - name: Build custom ISO
        run: |
          chmod +x create_ISO.bash
          ./create_ISO.bash "$DEBIAN_ISO_NAME" proxmox_custom.iso

      # Verify the custom ISO contents (optional)
      - name: Verify custom ISO contents
        run: |
          mkdir -p mnt
          mount -o loop proxmox_custom.iso mnt
          echo "ISO contents in /pve directory:"
          ls -lh mnt/pve/
          umount mnt

      # Release the custom ISO with date in the filename
      - uses: ncipollo/release-action@v1
        with:
          commit: "main"
          name: "Download ISO"
          tag: "${{ env.DEBIAN_VERSION }}"
          artifacts: "release_pve-custom-${{ github.run_id }}-$(date +%y%m%d).iso"
          allowUpdates: true
