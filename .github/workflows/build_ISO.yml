name: build_ISO
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker and use Debian 12
      - name: Run in Debian 12
        uses: addnab/docker-run-action@v3
        with:
          image: debian:12
          options: --privileged
          run: |
            # Update and install required tools
            apt-get update
            apt-get install -y wget xorriso dpkg-dev curl gnupg syslinux-utils

            # Fetch the latest Debian ISO dynamically
            ISO_BASE_URL="https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/"
            ISO_FILE=$(curl -s $ISO_BASE_URL | grep -oP 'href="debian-[0-9\.]+-amd64-netinst.iso"' | head -n 1 | cut -d'"' -f2)
            ISO_URL="${ISO_BASE_URL}${ISO_FILE}"
            wget $ISO_URL -O debian-netinst.iso

            # Download and install Proxmox packages
            echo "deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription" > /etc/apt/sources.list.d/pve-install-repo.list
            curl -fsSL https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg | tee /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg
            apt-get update
            mkdir -p pve
            apt-get download proxmox-ve postfix open-iscsi
            mv *.deb pve/

            # Create Packages.gz for the Proxmox local repository
            cd pve
            dpkg-scanpackages . > Packages
            gzip -9c Packages > Packages.gz
            cd ..

            # Mount and modify the Debian ISO
            mkdir -p temp iso
            mount -o loop debian-netinst.iso temp
            cp -a temp/. iso
            umount temp

            # Add preseed.cfg and Proxmox packages to the ISO
            cp preseed.cfg iso/
            cp -r pve iso/

            # Modify bootloader for automated installation
            sed -i "s+quiet+quiet priority=high locale=en_US.UTF-8 keymap=us file=/cdrom/preseed.cfg+g" iso/isolinux/txt.cfg iso/boot/grub/grub.cfg

            # Build the custom ISO
            xorriso \
              -outdev proxmox_custom.iso \
              -volid "Proxmox_Custom" \
              -padding 0 \
              -compliance no_emul_toc \
              -map "./iso" / \
              -chmod 0755 / -- \
              -boot_image isolinux dir=/isolinux \
              -boot_image any next \
              -boot_image any efi_path=boot/grub/efi.img \
              -boot_image isolinux partition_entry=gpt_basdat

            # Make the ISO hybrid for BIOS and UEFI
            isohybrid --uefi proxmox_custom.iso

            # Output ISO information for verification
            mkdir -p mnt
            mount -o loop proxmox_custom.iso mnt
            echo "Custom ISO contents:"
            ls -lh mnt/pve/
            umount mnt

            # Save the ISO
            mv proxmox_custom.iso /github/workspace/

      # Step 3: Publish the ISO
      - name: Release custom ISO
        uses: ncipollo/release-action@v1
        with:
          commit: "main"
          name: "Proxmox Custom ISO"
          tag: "v1.0.0"
          artifacts: "proxmox_custom.iso"
