name: build_ISO
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Step 1: Set variables
      - name: Set version variables
        run: |
          echo "DEBIAN_VERSION=12.8.0" >> $GITHUB_ENV
          echo "DEBIAN_ISO_NAME=debian-$DEBIAN_VERSION-amd64-netinst.iso" >> $GITHUB_ENV
          echo "DEBIAN_ISO_URL=https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/$DEBIAN_ISO_NAME" >> $GITHUB_ENV

      # Step 2: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 3: Prepare the environment
      - name: Prepare environment
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso dpkg-dev curl gnupg syslinux-utils

      # Step 4: Download the Debian ISO
      - name: Download Debian ISO
        run: |
          wget ${{ env.DEBIAN_ISO_URL }} -O ${{ env.DEBIAN_ISO_NAME }}

      # Step 5: Build local Proxmox repository
      - name: Build Proxmox offline repository
        run: |
          # Configure Proxmox repository
          echo "deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription" | sudo tee /etc/apt/sources.list.d/pve-install-repo.list
          curl -fsSL https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg | sudo tee /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg > /dev/null
          
          # Create directory for offline repository
          mkdir -p pve
          
          # Download required Proxmox packages
          sudo apt-get update
          sudo apt-get download -o Dir::Cache="./pve" proxmox-ve postfix open-iscsi

          # Generate Packages and Packages.gz for the local repository
          cd pve
          dpkg-scanpackages . > Packages
          gzip -9c Packages > Packages.gz
          cd ..

          # Verify the downloaded files
          echo "Downloaded Proxmox packages:"
          ls -lh pve/

      # Step 6: Build the custom ISO
      - name: Build custom ISO
        run: |
          # Unpack and prepare the base ISO
          mkdir -p temp
          mount -o loop ${{ env.DEBIAN_ISO_NAME }} temp
          cp -a temp/. iso
          chmod -R 644 iso
          umount temp

          # Copy the offline repository and preseed file into the ISO
          cp preseed.cfg ./iso
          cp -r pve ./iso

          # Update boot menu to include the preseed configuration
          sed -i "s+quiet+quiet priority=high locale=en_US.UTF-8 keymap=us file=/cdrom/preseed.cfg+g" iso/isolinux/txt.cfg iso/boot/grub/grub.cfg

          # Build the custom ISO
          xorriso \
            -outdev "proxmox_custom.iso" \
            -volid "Proxmox_Custom" \
            -padding 0 \
            -compliance no_emul_toc \
            -map "./iso" / \
            -chmod 0755 / -- \
            -boot_image isolinux dir=/isolinux \
            -boot_image grub grub2_path=/boot/grub/efi.img \
            -boot_image any efi_path=boot/grub/efi.img \
            -boot_image isolinux partition_entry=gpt_basdat

          # Make ISO hybrid for both BIOS and UEFI boot
          isohybrid --uefi proxmox_custom.iso

      # Step 7: Verify the custom ISO
      - name: Verify custom ISO contents
        run: |
          mkdir -p mnt
          sudo mount -o loop proxmox_custom.iso mnt
          echo "ISO contents:"
          ls -lh mnt/pve/
          sudo umount mnt

      # Step 8: Release the custom ISO
      - uses: ncipollo/release-action@v1
        with:
          commit: "main"
          name: "Download ISO"
          tag: "${{ env.DEBIAN_VERSION }}"
          artifacts: "proxmox_custom.iso"
